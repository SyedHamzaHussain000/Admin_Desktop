import React, { useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { baseURL } from '../utils/baseURL';
import BackButton from '../../components/BackButton';
import { useSelector } from 'react-redux';
import axios from 'axios';

function ProfileDetail() {
    const { items } = useParams(); // This should match with the route definition

    const location = useLocation();
  
    const { item } = location.state || {}; 
    const navigate = useNavigate();

    const token = useSelector((state) => state.auth.token);

    const [year, setYear] = useState(new Date().getFullYear());
    const [month, setMonth] = useState(new Date().getMonth() + 1); // Months are 0-based

    const [leadsres, setLeadsRes] = useState([])
    const [pendingLeads, setPendingLeads] = useState([]);
    const [completedLeads, setCompletedLeads] = useState([]);
    const [abortedLeads, setAbortedLeads] = useState([]);

    const [leadsresLoader, setLeadsResLoader] = useState(false)

    console.log("items",item._id)

    const fetchLeads = () => {
      console.log("leads",year,month)
      try {
        
        setLeadsResLoader(true)
        let data = JSON.stringify({
          "saleOfficerId": item._id,
          "year": year,
          "month": month
        });
        
        let config = {
          method: 'post',
          maxBodyLength: Infinity,
          url: 'https://appsdemo.pro/DesktopApp/get-lead-by-month',
          headers: { 
            'Content-Type': 'application/json', 
            'Authorization': `Bearer ${token}`, 
          },
          data : data
        };
        
        axios.request(config)
        .then((response) => {
          console.log(JSON.stringify(response.data.leads));
          setLeadsRes(response.data.leads)
          const leads = response.data.leads;

      // Separate leads based on status
      const pending = [];
      const completed = [];
      const aborted = [];

      leads.forEach((lead) => {
        if (lead.status === "Pending") {
          pending.push(lead);
        } else if (lead.status === "Completed") {
          completed.push(lead);
        } else if (lead.status === "Aborted") {
          aborted.push(lead);
        }
      });

      // Update the states
      setPendingLeads(pending);
      setCompletedLeads(completed);
      setAbortedLeads(aborted);


    

          
          setLeadsResLoader(false)
        })
        .catch((error) => {
          console.log(error);
          setLeadsResLoader(false)
        });
      } catch (error) {
        console.log("error", error) 
        setLeadsResLoader(false)  
      }
      
    }

    console.log("item......", item)
  return (
    <div
      style={{
        background: '#F6F6F6',
        //   background:'blue',

        borderRadius: 10,
        marginLeft: 20,
        boxShadow: '0px 4px 12px rgba(0, 0, 0, 0.1)',
        padding: 20,
        alignSelf:'center',

      }}
    >
      <div
        style={{

          justifyContent: 'center',
          alignItems: 'center',
        }}
      >
        <div style={{ alignItems:'center', justifyContent:'center' }}>
            <BackButton nav={()=> navigate('/')}/>
          <p style={{ fontSize: 30, marginLeft: 10, }}>User Details</p>
            <img src={`${baseURL}public/Profiles/${item.profilePic}`}   style={{height:100, width:100, borderRadius:200}}  />
            <p>Name: {item.name}</p>
            <p>Email: {item.email}</p>
            {/* <p>Bio: {item.bio}</p> */}

            <div>
      <h3>Fetch Leads by Month</h3>
      <div style={{marginTop:20}}>
        <label>Year:</label>
        <input
          type="number"
          value={year}
          onChange={(e) => setYear(Number(e.target.value))}
        />
      </div>
      <div style={{marginTop:20, marginBottom:10}}>
        <label>Month:</label>
        <input
          type="number"
          value={month}
          min="1"
          max="12"
          onChange={(e) => setMonth(Number(e.target.value))}
        />
      </div>
      <button style={{height:50, width:"100px", background:'#8D1F20', color:'white'}} onClick={()=>fetchLeads()} >{leadsresLoader == true ? "Loading..." : "Get Leads" } </button>

      <p>Total number of leads generated by {item.name} is {leadsresLoader == true ? "Loading..." :  leadsres?.length}</p>

    </div>
        </div>  

        <div>
        <h1>Report Details for {month}/{year}</h1>

      <div>
        <h2>{pendingLeads.length} Pending Reports</h2>
        {pendingLeads.length > 0 ? (
          pendingLeads.map((lead) => (
            <div key={lead._id}>
              <p>{lead.callername} - {lead.status}</p>
            </div>
          ))
        ) : (
          <p>No pending reports</p>
        )}
      </div>

      <div>
        <h2>{completedLeads.length}  Completed Reports</h2>
        {completedLeads.length > 0 ? (
          completedLeads.map((lead) => (
            <div key={lead._id}>
              <p>{lead.callername} - {lead.status}</p>
            </div>
          ))
        ) : (
          <p>No completed reports</p>
        )}
      </div>

      <div>
        <h2>{abortedLeads.length} Aborted Reports</h2>
        {abortedLeads.length > 0 ? (
          abortedLeads.map((lead) => (
            <div key={lead._id}>
              <p>{lead.callername} - {lead.status}</p>
            </div>
          ))
        ) : (
          <p>No aborted reports</p>
        )}
      </div>
    </div>

      </div>
    </div>
  );
}

export default ProfileDetail;
